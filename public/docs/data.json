{
    "project": {},
    "files": {
        "lib/flotr2.min.js": {
            "name": "lib/flotr2.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Axis.js": {
            "name": "Axis.js",
            "modules": {},
            "classes": {
                "Axis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Camera.js": {
            "name": "Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Connector.js": {
            "name": "Connector.js",
            "modules": {},
            "classes": {
                "Connector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Detector.js": {
            "name": "Detector.js",
            "modules": {},
            "classes": {
                "Detector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Drawer.js": {
            "name": "Drawer.js",
            "modules": {},
            "classes": {
                "Drawer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Graph.js": {
            "name": "Graph.js",
            "modules": {},
            "classes": {
                "Graph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Organizer.js": {
            "name": "Organizer.js",
            "modules": {},
            "classes": {
                "Organizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Plane.js": {
            "name": "Plane.js",
            "modules": {},
            "classes": {
                "Plane": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Plot2D.js": {
            "name": "Plot2D.js",
            "modules": {},
            "classes": {
                "Plot2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Scene.js": {
            "name": "Scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "Utils.js": {
            "name": "Utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "ViewController.js": {
            "name": "ViewController.js",
            "modules": {},
            "classes": {
                "ViewController": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Axis": {
            "name": "Axis",
            "shortname": "Axis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Axis.js",
            "line": 9,
            "is_constructor": 1
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Camera.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "aspect",
                    "description": "The camera aspect",
                    "type": "Number"
                }
            ]
        },
        "Connector": {
            "name": "Connector",
            "shortname": "Connector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Connector.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "org",
                    "description": "The organizer object which will receive the Connector requests after an event is handled",
                    "type": "Organizer"
                }
            ]
        },
        "Detector": {
            "name": "Detector",
            "shortname": "Detector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Detector.js",
            "line": 7,
            "description": "Auxiliary Detector Module",
            "static": 1
        },
        "Drawer": {
            "name": "Drawer",
            "shortname": "Drawer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Drawer.js",
            "line": 7,
            "is_constructor": 1
        },
        "Graph": {
            "name": "Graph",
            "shortname": "Graph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Graph.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "the characteristics of the Graph",
                    "type": "Object"
                }
            ]
        },
        "Organizer": {
            "name": "Organizer",
            "shortname": "Organizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Organizer.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "vc",
                    "description": "The ViewController object",
                    "type": "ViewController"
                }
            ]
        },
        "Plane": {
            "name": "Plane",
            "shortname": "Plane",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Plane.js",
            "line": 9,
            "is_constructor": 1,
            "params": [
                {
                    "name": "test",
                    "description": "Information about the test that are going to be launched",
                    "type": "Object"
                },
                {
                    "name": "size",
                    "description": "Size of the plane that is going to be created",
                    "type": "Object"
                }
            ]
        },
        "Plot2D": {
            "name": "Plot2D",
            "shortname": "Plot2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Plot2D.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the plot component (cpu, memory, ...)",
                    "type": "String"
                },
                {
                    "name": "limit",
                    "description": "The limit of the plot (the top is 100%)",
                    "type": "Integer"
                }
            ]
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Scene.js",
            "line": 7,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options required for the graph creation",
                    "type": "Object"
                }
            ]
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "Utils.js",
            "line": 40,
            "description": "Auxiliary Utils Module",
            "static": 1
        },
        "ViewController": {
            "name": "ViewController",
            "shortname": "ViewController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "ViewController.js",
            "line": 20,
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib/flotr2.min.js",
            "line": 20,
            "description": "Flotr2 (c) 2012 Carl Sutherland\nMIT License\nSpecial thanks to:\nFlotr: http://code.google.com/p/flotr/ (fork)\nFlot: https://github.com/flot/flot (original fork)",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 17,
            "description": "Graph size",
            "itemtype": "property",
            "name": "size",
            "type": "Object",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 24,
            "description": "Set of options that condition the axis",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 31,
            "description": "Array of displayed messages",
            "itemtype": "property",
            "name": "texts",
            "type": "Array",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 38,
            "description": "Axis frame",
            "itemtype": "property",
            "name": "frame",
            "type": "Object",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 45,
            "description": "Divisions grid",
            "itemtype": "property",
            "name": "grid",
            "type": "Object",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 52,
            "description": "Full 3D axis object",
            "itemtype": "property",
            "name": "threeAxis",
            "type": "Object",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 65,
            "description": "Axis creation method (consists on the addition of the different parts and a position change)",
            "itemtype": "method",
            "name": "createAxis",
            "access": "private",
            "tagname": "",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 87,
            "description": "Auxiliar method to reduce verbosity",
            "itemtype": "method",
            "name": "v",
            "access": "private",
            "tagname": "",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 97,
            "description": "Frame creation method (can make 2D or 3D axis depending on the input size)",
            "itemtype": "method",
            "name": "createFrame",
            "access": "private",
            "tagname": "",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 146,
            "description": "Grid creation method (can make 2D or 3D axis depending on the input size)",
            "itemtype": "method",
            "name": "createGrid",
            "access": "private",
            "tagname": "",
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 165,
            "description": "This method helps the createGrid metho to create each part of the grid.\nIt's also used to update said parts when rescaling the graph.",
            "itemtype": "method",
            "name": "setPart",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "coord",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "maxHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 288,
            "description": "Method to put the axis titles",
            "itemtype": "method",
            "name": "setTitles",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "frame",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "titles",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 329,
            "description": "Method to print and associate a value to an object in a given position",
            "itemtype": "method",
            "name": "setTitles",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "part",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 351,
            "description": "Method which performs the animation loop",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "camera",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Axis"
        },
        {
            "file": "Axis.js",
            "line": 366,
            "description": "This method rescales all the points of the plane according to a new Ratio",
            "itemtype": "method",
            "name": "rescale",
            "params": [
                {
                    "name": "maxHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Axis"
        },
        {
            "file": "Camera.js",
            "line": 16,
            "description": "The actual camera object",
            "itemtype": "property",
            "name": "threeCamera",
            "type": "THREE.PerspectiveCamera",
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 24,
            "description": "The object which contains the camera controls",
            "itemtype": "property",
            "name": "threeCamera",
            "type": "THREE.PerspectiveCamera",
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 34,
            "description": "Creates a new actual camera object",
            "itemtype": "method",
            "name": "createCamera",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "aspect",
                    "description": "The camera aspect",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The created camera",
                "type": "THREE.Camera"
            },
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 68,
            "description": "This method updates the camera state within the main animation loop",
            "itemtype": "method",
            "name": "animate",
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 77,
            "description": "Disables the camera controls",
            "itemtype": "method",
            "name": "disableControls",
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 86,
            "description": "Enables the camera controls",
            "itemtype": "method",
            "name": "enableControls",
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 95,
            "description": "The camera will look at the specified target",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "The",
                    "description": "target",
                    "type": "THREE.Object3D"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 105,
            "description": "To set the camera controls",
            "itemtype": "method",
            "name": "setControls",
            "params": [
                {
                    "name": "The",
                    "description": "callback called when the controls change",
                    "type": "Function"
                },
                {
                    "name": "The",
                    "description": "object with the predefined options",
                    "type": "Object"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 133,
            "description": "To set the camera position",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "The",
                    "description": "object with the X, Y and Z coordinates",
                    "type": "Object"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 149,
            "description": "Updates the current camera aspect",
            "itemtype": "method",
            "name": "updateAspect",
            "params": [
                {
                    "name": "The",
                    "description": "new aspect",
                    "type": "Number"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "Camera.js",
            "line": 162,
            "description": "To update the camera controls manually (this is perfomed automatically by the animation method)",
            "itemtype": "method",
            "name": "updateControls",
            "params": [
                {
                    "name": "The",
                    "description": "object with the X, Y and Z coordinates",
                    "type": "Object"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "Connector.js",
            "line": 16,
            "description": "The Organizer object which direct the app",
            "itemtype": "property",
            "name": "organizer",
            "type": "Organizer",
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 24,
            "description": "A list to save the current final version of each test",
            "itemtype": "property",
            "name": "versions",
            "type": "array",
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 32,
            "description": "The WebSocket used to receive/sent data from/to the server in real-time",
            "itemtype": "property",
            "name": "socket",
            "type": "Object",
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 51,
            "description": "Auxiliary method to handle an event when a new point comes from the server",
            "itemtype": "method",
            "name": "setupNewPointEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conn",
                    "description": "",
                    "type": "Connector"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 82,
            "description": "Auxiliary method to handle one event per plot defined in the constants file",
            "itemtype": "method",
            "name": "setupPlotsEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conn",
                    "description": "",
                    "type": "Connector"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 112,
            "description": "Auxiliary method to handle several possible error events",
            "itemtype": "method",
            "name": "setupErrorEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conn",
                    "description": "",
                    "type": "Connector"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 160,
            "description": "Method used to listen to events received by the socket",
            "itemtype": "method",
            "name": "setupEvents",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "conn",
                    "description": "",
                    "type": "Connector"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 212,
            "description": "Method to establish a new connection with a server through the Web Socket",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 232,
            "description": "Method to start a new test",
            "itemtype": "method",
            "name": "startTest",
            "params": [
                {
                    "name": "num",
                    "description": "The test number",
                    "type": "Number"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 242,
            "description": "Method to restart a new test",
            "itemtype": "method",
            "name": "restartTest",
            "params": [
                {
                    "name": "num",
                    "description": "The test number",
                    "type": "Number"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 257,
            "description": "Method to pause a new test",
            "itemtype": "method",
            "name": "pauseTest",
            "params": [
                {
                    "name": "num",
                    "description": "The test number",
                    "type": "Number"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 267,
            "description": "Method to continue a new test",
            "itemtype": "method",
            "name": "continueTest",
            "params": [
                {
                    "name": "num",
                    "description": "The test number",
                    "type": "Number"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Connector.js",
            "line": 277,
            "description": "Method to let clients of this API to add new events received by the WebSocket",
            "itemtype": "method",
            "name": "addNewEvent",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Connector"
        },
        {
            "file": "Detector.js",
            "line": 14,
            "description": "Knowing the graphic card support",
            "itemtype": "property",
            "name": "GPUReady",
            "final": 1,
            "class": "Detector"
        },
        {
            "file": "Detector.js",
            "line": 22,
            "description": "Knowing the browser support",
            "itemtype": "property",
            "name": "BrowserReady",
            "final": 1,
            "class": "Detector"
        },
        {
            "file": "Detector.js",
            "line": 30,
            "description": "Knowing if WebGL is supported",
            "itemtype": "method",
            "name": "webgl",
            "return": {
                "description": "supported",
                "type": "Boolean"
            },
            "class": "Detector"
        },
        {
            "file": "Detector.js",
            "line": 47,
            "description": "If there is no support for WebGL, the user will see a warning message",
            "itemtype": "method",
            "name": "showErrorMessage",
            "class": "Detector"
        },
        {
            "file": "Drawer.js",
            "line": 15,
            "description": "The array which contains the created scenes by the drawer",
            "itemtype": "property",
            "name": "arrayScenes",
            "type": "array",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 23,
            "description": "The array which contains the created cameras by the drawer\nThere must be the same number of scenes and cameras (one camera per scene)",
            "itemtype": "property",
            "name": "arrayCameras",
            "type": "array",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 32,
            "description": "The number of the scene that is currently being rendered",
            "itemtype": "property",
            "name": "currentScene",
            "type": "number",
            "default": "0",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 41,
            "description": "The canvas object where the WebGL render draws",
            "itemtype": "property",
            "name": "canvas",
            "type": "DOMObject",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 49,
            "description": "The THREE renderer object",
            "itemtype": "property",
            "name": "threeRenderer",
            "type": "THREE.Renderer",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 70,
            "description": "Auxiliary function to support shim RequestAnimationFrame",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback perform by the RAF",
                    "type": "Function"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 94,
            "description": "Event called when the window changed its size\nMethod invoked with the Drawer context",
            "itemtype": "event",
            "name": "onWindowResize",
            "access": "private",
            "tagname": "",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 116,
            "description": "Event called when the mouse entered in the render region\nMethod invoked with the Drawer context",
            "itemtype": "event",
            "name": "onMouseEnter",
            "access": "private",
            "tagname": "",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 127,
            "description": "Event called when the mouse went out of the render region\nMethod invoked with the Drawer context",
            "itemtype": "event",
            "name": "onMouseOut",
            "access": "private",
            "tagname": "",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 149,
            "description": "Method which performs the animation loop",
            "itemtype": "method",
            "name": "animate",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 173,
            "description": "Creates the cameras needed by the scenes",
            "itemtype": "method",
            "name": "createCameras",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 216,
            "description": "Creates the 3D renderer and will draw inside of the canvas",
            "itemtype": "method",
            "name": "createRenderer",
            "params": [
                {
                    "name": "canvas",
                    "description": "The canvas which should replace the current one",
                    "type": "DOMObject"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 239,
            "description": "Creates the scenes needed for each test",
            "itemtype": "method",
            "name": "createScenes",
            "params": [
                {
                    "name": "tests",
                    "description": "The test information needed for the graphs creation",
                    "type": "Object"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 266,
            "description": "The method to render the current scene with its corresponding camera",
            "itemtype": "method",
            "name": "render",
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 284,
            "description": "To add a new point sent by the connector to the current scene.\nThe drawer delegates this task in order to get a scene which add the point to its inner elements",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "testNumber",
                    "description": "The test ID",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The received point to be added into the scene",
                    "type": "Object"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 299,
            "description": "Updates the drawer to the new current scenes asked by the user",
            "itemtype": "method",
            "name": "changeToTest",
            "params": [
                {
                    "name": "testNumber",
                    "description": "The test ID",
                    "type": "Number"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 312,
            "description": "Configures the drawer creating the scenes and cameras needed and performs the animation loop",
            "itemtype": "method",
            "name": "changeToTest",
            "params": [
                {
                    "name": "tests",
                    "description": "The test ID",
                    "type": "Number"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 327,
            "description": "Method to return the DOM element",
            "itemtype": "method",
            "name": "DOMElement",
            "return": {
                "description": "the DOM element provided by the renderer"
            },
            "class": "Drawer"
        },
        {
            "file": "Drawer.js",
            "line": 337,
            "description": "Restarts the scene of the given test",
            "itemtype": "method",
            "name": "restart",
            "params": [
                {
                    "name": "testNumber",
                    "description": "The test ID",
                    "type": "Number"
                }
            ],
            "class": "Drawer"
        },
        {
            "file": "Graph.js",
            "line": 16,
            "itemtype": "property",
            "name": "axis",
            "type": "THREE.Axis",
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 22,
            "itemtype": "property",
            "name": "plot",
            "type": "THREE.Plane",
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 28,
            "itemtype": "property",
            "name": "maxPoint",
            "type": "Int",
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 34,
            "itemtype": "property",
            "name": "cota",
            "type": "number",
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 54,
            "description": "adds a Point to the plane and checks if reescalation is needed",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "the point that is going to be drawn",
                    "type": "Object"
                }
            ],
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 85,
            "description": "this method delegates the animate to Axis and Plot implementations",
            "itemtype": "method",
            "name": "animate",
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 98,
            "description": "this method creates an instance of Axis",
            "itemtype": "method",
            "name": "createAxis",
            "params": [
                {
                    "name": "options",
                    "description": "the characteristics of the Axis",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the created axis",
                "type": "THREE.Axis"
            },
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 114,
            "description": "this method creates an instance of Plane",
            "itemtype": "method",
            "name": "createPlot",
            "params": [
                {
                    "name": "options",
                    "description": "the characteristics of the Plane",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the created plane",
                "type": "THREE.Plane"
            },
            "class": "Graph"
        },
        {
            "file": "Graph.js",
            "line": 135,
            "description": "This method delegates the restart behaviour to the implementation in Plot",
            "itemtype": "method",
            "name": "restart",
            "class": "Graph"
        },
        {
            "file": "Organizer.js",
            "line": 16,
            "itemtype": "property",
            "name": "vc",
            "type": "ViewController",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 23,
            "description": "Main drawing utility to visualize data points using WebGL",
            "itemtype": "property",
            "name": "drawer",
            "type": "Drawer",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 31,
            "description": "Connector module to establish a connection with the server",
            "itemtype": "property",
            "name": "conn",
            "type": "Connector",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 53,
            "description": "Method to create 2D plots dynamically",
            "itemtype": "method",
            "name": "createPlots",
            "params": [
                {
                    "name": "plots",
                    "description": "The object which contains the plot configurations",
                    "type": "Object"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 78,
            "description": "Method to change the current test status to the given one",
            "itemtype": "method",
            "name": "changeToTest",
            "params": [
                {
                    "name": "testNumber",
                    "description": "The test id",
                    "type": "Number"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 88,
            "description": "Method to tell the Connector to resume a paused test",
            "itemtype": "method",
            "name": "resume",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 100,
            "description": "Method to return back the DOM element that represents the WebGL Render",
            "itemtype": "method",
            "name": "DOMElement",
            "return": {
                "description": "The DOM element addressed by the ViewController",
                "type": "Canvas Object"
            },
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 110,
            "description": "Method to tell the Connector to pause a started test",
            "itemtype": "method",
            "name": "pause",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 122,
            "description": "Method to tell the Connector to restart a started test",
            "itemtype": "method",
            "name": "restart",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 137,
            "description": "Method to tell the Connector to start a test",
            "itemtype": "method",
            "name": "start",
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 151,
            "description": "Method to tell the drawer to draw a new received point",
            "itemtype": "method",
            "name": "addData",
            "params": [
                {
                    "name": "test",
                    "description": "The test id",
                    "type": "Number"
                },
                {
                    "name": "point",
                    "description": "The point that must be added to the drawer",
                    "type": "Array"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 165,
            "description": "Method to tell a specific 2D plot to draw a new received performance data",
            "itemtype": "method",
            "name": "addDataPlots",
            "params": [
                {
                    "name": "host",
                    "description": "The host name",
                    "type": "String"
                },
                {
                    "name": "time",
                    "description": "The time when the event was produced on the server",
                    "type": "Number"
                },
                {
                    "name": "data",
                    "description": "The data point received",
                    "type": "Number"
                },
                {
                    "name": "plotName",
                    "description": "The plot name which should add the point",
                    "type": "String"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 189,
            "description": "Method to initialize and configure the 2D plots",
            "itemtype": "method",
            "name": "configPlots",
            "params": [
                {
                    "name": "interval",
                    "description": "The interval between points",
                    "type": "Number"
                },
                {
                    "name": "nagents",
                    "description": "The number of agents considered by the plots",
                    "type": "Number"
                },
                {
                    "name": "hostnames",
                    "description": "The array of hosts which will send points",
                    "type": "Array"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 213,
            "description": "Method to initialize and configure main 3D drawer",
            "itemtype": "method",
            "name": "configTest",
            "params": [
                {
                    "name": "tests",
                    "description": "the object with the test information",
                    "type": "Object"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Organizer.js",
            "line": 226,
            "description": "Method to log and show in the UI every received data",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "timestamp",
                    "description": "The time when the event was produced on the server",
                    "type": "Number"
                },
                {
                    "name": "message",
                    "description": "The message that must be logged",
                    "type": "String"
                },
                {
                    "name": "host",
                    "description": "The host name",
                    "type": "String"
                }
            ],
            "class": "Organizer"
        },
        {
            "file": "Plane.js",
            "line": 18,
            "itemtype": "property",
            "name": "test",
            "type": "{Object}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 23,
            "itemtype": "property",
            "name": "oldAverage",
            "type": "{Number}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 28,
            "itemtype": "property",
            "name": "sizeMap",
            "type": "{Object}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 33,
            "itemtype": "property",
            "name": "plane",
            "type": "{THREE.Object3D}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 38,
            "itemtype": "property",
            "name": "points",
            "type": "{Object}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 43,
            "itemtype": "property",
            "name": "ratio",
            "type": "{Number}",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 56,
            "description": "This function returns the transformed coordinate of one coordinate",
            "itemtype": "method",
            "name": "coord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "i",
                    "description": "The coordinate to transform",
                    "type": "Int"
                },
                {
                    "name": "start",
                    "description": "The minimum value that i can be",
                    "type": "Int"
                },
                {
                    "name": "interval",
                    "description": "The interval on i for two consecutive coordinates",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "the coord that has been transformated",
                "type": "Int"
            },
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 72,
            "description": "This function sets the transition between different colors on a Plane",
            "itemtype": "method",
            "name": "setColors",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "plane",
                    "description": "The plane to set colors to",
                    "type": "THREE.Mesh"
                }
            ],
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 111,
            "description": "This function is used to tell the Renderer that a plane must be recalculated.",
            "itemtype": "method",
            "name": "setup",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "p",
                    "description": "the index of the plane to recalculate",
                    "type": "Int"
                }
            ],
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 153,
            "description": "this function creates a THREE.3DObject with the required size and returns it",
            "itemtype": "method",
            "name": "createPlane",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "test",
                    "description": "object that contains the characteristics of the running test",
                    "type": "Object"
                },
                {
                    "name": "size",
                    "description": "object that contains x and y sizes of the plane that's being created",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The created Plane",
                "type": "THREE.Object3D"
            },
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 209,
            "description": "This function draws a new received point into the plane and\n marks it to be updated.",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "point",
                    "description": "the point to be drawn",
                    "type": "Object"
                }
            ],
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 246,
            "description": "This method rescales all the points of the plane according to a new Ratio",
            "itemtype": "method",
            "name": "rescale",
            "params": [
                {
                    "name": "newRatio",
                    "description": "the ratio that is going to be used to rescale the points",
                    "type": "Number"
                }
            ],
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 274,
            "description": "This method clears the array of received points and sets the height of all the points to 0",
            "itemtype": "method",
            "name": "restart",
            "class": "Plane"
        },
        {
            "file": "Plane.js",
            "line": 286,
            "description": "This function is used to set the points that haven't been received\n yet to a height equal to the average of the points received (so that\n the colors are more precise from the beginning)",
            "itemtype": "method",
            "name": "stabilize",
            "class": "Plane"
        },
        {
            "file": "Plot2D.js",
            "line": 20,
            "description": "The name which set the widget we are referring",
            "itemtype": "property",
            "name": "NAME",
            "type": "String",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 27,
            "description": "The top limit of the graphic",
            "itemtype": "property",
            "name": "limit",
            "type": "Number",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 34,
            "description": "List whose length determines the number of agents involved in the test",
            "itemtype": "property",
            "name": "agents",
            "type": "array",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 41,
            "description": "List of the points that will be drawn in the graphic",
            "itemtype": "property",
            "name": "data",
            "type": "array",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 48,
            "description": "Graphic that will be drawn",
            "itemtype": "property",
            "name": "graph",
            "type": "Flotr object",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 55,
            "description": "DOM object where the \"name\" graphics will be placed",
            "itemtype": "property",
            "name": "dom",
            "type": "DOM element",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 62,
            "description": "Key table",
            "itemtype": "property",
            "name": "keys",
            "type": "DOM element",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 69,
            "description": "Template for the key table",
            "itemtype": "property",
            "name": "template",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 84,
            "description": "Auxiliary method to set the keys in the DOM",
            "itemtype": "method",
            "name": "setupKeysHTML",
            "access": "private",
            "tagname": "",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 114,
            "description": "Method used for the update of the data for each agent",
            "itemtype": "method",
            "name": "updateAgentData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "agent",
                    "description": "the name of the agent to be updated",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the performance value",
                    "type": "Number"
                }
            ],
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 153,
            "description": "Method used for the update of the keys",
            "itemtype": "method",
            "name": "updateKeys",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "host",
                    "description": "the name of the agent to be updated",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the performance value",
                    "type": "Number"
                }
            ],
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 182,
            "description": "Method to initialize the graphic",
            "itemtype": "method",
            "name": "config",
            "params": [
                {
                    "name": "interval",
                    "description": "The interval between points",
                    "type": "Number"
                },
                {
                    "name": "nagents",
                    "description": "The number of agents",
                    "type": "Number"
                },
                {
                    "name": "hostnames",
                    "description": "The array with the agents names",
                    "type": "Array"
                }
            ],
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 217,
            "description": "Method to draw the graphic",
            "itemtype": "method",
            "name": "draw",
            "class": "Plot2D"
        },
        {
            "file": "Plot2D.js",
            "line": 242,
            "description": "Method to update the value of a particular agent",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "agent",
                    "description": "the name of the agent to be updated",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the performance value",
                    "type": "Number"
                }
            ],
            "class": "Plot2D"
        },
        {
            "file": "Scene.js",
            "line": 16,
            "description": "The actual scene object",
            "itemtype": "property",
            "name": "threeScene",
            "type": "THREE.Scene",
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 24,
            "description": "The contained graph",
            "itemtype": "property",
            "name": "graph",
            "type": "THREE.Scene",
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 42,
            "description": "Method that creates an instance of Scene and returns it",
            "itemtype": "method",
            "name": "createScene",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the instantiated scene",
                "type": "Scene"
            },
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 58,
            "description": "This function creates the standard lights",
            "itemtype": "method",
            "name": "createLights",
            "access": "private",
            "tagname": "",
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 92,
            "description": "This function adds a point to the Plane",
            "itemtype": "method",
            "name": "addDataToGraph",
            "params": [
                {
                    "name": "point",
                    "description": "The coordinatesof the point",
                    "type": "Object"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 103,
            "description": "This method delegates the animate functions to the Graph",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "threeCamera",
                    "description": "the camera with which we are rendering",
                    "type": "THREE.PerspectiveCamera"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 114,
            "description": "This method adds one light to the ones that already exist",
            "itemtype": "method",
            "name": "createLight",
            "params": [
                {
                    "name": "pos",
                    "description": "object that contains the position of the new Light",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the created light",
                "type": "THREE.DirectionalLight"
            },
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 134,
            "description": "this method instantiates the Graph attribute",
            "itemtype": "method",
            "name": "createGraph",
            "params": [
                {
                    "name": "options",
                    "description": "the info needed by the Graph to be instantiated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the created Graph",
                "type": "Graph"
            },
            "class": "Scene"
        },
        {
            "file": "Scene.js",
            "line": 150,
            "description": "This function delegates the restart behaviour to the Graph",
            "itemtype": "method",
            "name": "restart",
            "class": "Scene"
        },
        {
            "file": "Utils.js",
            "line": 9,
            "description": "Auxiliary function called by createText2D",
            "itemtype": "method",
            "name": "createTextCanvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "The text that should be boxed in a canvas",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "The size of the element",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "The desired color",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The desired text font",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object needed",
                "type": "Canvas Object"
            },
            "class": "Utils"
        },
        {
            "file": "Utils.js",
            "line": 47,
            "description": "Method to create meshes",
            "itemtype": "method",
            "name": "createText2D",
            "params": [
                {
                    "name": "text",
                    "description": "The text that should be boxed in a canvas",
                    "type": "String"
                },
                {
                    "name": "size",
                    "description": "The size of the element",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "The desired color",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The desired text font",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A 2D mesh object",
                "type": "THREE.Mesh"
            },
            "class": "Utils"
        },
        {
            "file": "ViewController.js",
            "line": 28,
            "description": "The organizer layer",
            "itemtype": "property",
            "name": "organizer",
            "type": "Organizer",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 36,
            "description": "The machine state used for the buttons panel",
            "itemtype": "property",
            "name": "state",
            "type": "Object",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 63,
            "description": "Method invoked with the ViewController context",
            "itemtype": "method",
            "name": "setupEventHandlers",
            "access": "private",
            "tagname": "",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 89,
            "description": "It changes the description text depending on the test number",
            "itemtype": "method",
            "name": "updateDescription",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "number",
                    "description": "the test number",
                    "type": "Number"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 103,
            "description": "Handler called by other specific modal window events handlers (hideModalBox y reloadWebsite)",
            "itemtype": "method",
            "name": "modalHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event launched",
                    "type": "Event"
                },
                {
                    "name": "callback",
                    "description": "The callback which must be called",
                    "type": "Function"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 124,
            "description": "Event performed when the 'Ready' button is pressed",
            "itemtype": "event",
            "name": "hideModalBox",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event launched",
                    "type": "Event"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 144,
            "description": "Event performed when the 'Reload' button is pressed",
            "itemtype": "event",
            "name": "reloadWebsite",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event launched",
                    "type": "Event"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 163,
            "description": "Function invoked with the ViewController context\nIt will increase the progress bar",
            "itemtype": "method",
            "name": "setBarInterval",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "time",
                    "description": "the time needed for the animation",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "the boolean condition to end or not the animation",
                    "type": "Boolean"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 188,
            "description": "Tab Buttons Event Handler",
            "itemtype": "method",
            "name": "changeTest",
            "params": [
                {
                    "name": "currentTab",
                    "description": "The current tab clicked by the user",
                    "type": "JQuery Object"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 226,
            "description": "Method which removes every log tracked and disable the button",
            "itemtype": "method",
            "name": "clearLogger",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 246,
            "description": "Method invoked by the Organizer when he receives the init event from the server",
            "itemtype": "method",
            "name": "endModalbar",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 256,
            "description": "Method to increase the % of the modal progress bar",
            "itemtype": "method",
            "name": "increaseBar",
            "params": [
                {
                    "name": "end",
                    "description": "the condition to launch or not the final timeout",
                    "type": "Boolean"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 315,
            "description": "Method to format and log the messages received from the server",
            "itemtype": "method",
            "name": "logData",
            "params": [
                {
                    "name": "timestamp",
                    "description": "The timestamp when the log was produced",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The message which contains the data received",
                    "type": "String"
                },
                {
                    "name": "host",
                    "description": "The machine name which sent the message",
                    "type": "String"
                }
            ],
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 349,
            "description": "Pause/Continue Button Event Handler",
            "itemtype": "method",
            "name": "pause",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 378,
            "description": "Method used to download and save the logs received into a file",
            "itemtype": "method",
            "name": "saveLogger",
            "class": "ViewController"
        },
        {
            "file": "ViewController.js",
            "line": 408,
            "description": "Start/Restart Button Event Handler",
            "itemtype": "method",
            "name": "start",
            "class": "ViewController"
        }
    ]
}